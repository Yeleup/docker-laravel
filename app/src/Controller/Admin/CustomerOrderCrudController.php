<?php

namespace App\Controller\Admin;

use App\Entity\Transaction;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\DateField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class CustomerOrderCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Transaction::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->remove(Crud::PAGE_INDEX, Action::EDIT)
            ->setPermissions([Action::EDIT => ['ROLE_ADMIN', 'ROLE_CONTROL']])
            ->setPermission(Action::DETAIL, 'ROLE_ADMIN')
            ->setPermission(Action::DELETE, 'ROLE_ADMIN')
            ->setPermission(Action::NEW, 'ROLE_ADMIN');
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {
        $user_id = $this->getUser()->getId();

        $queryBuilder = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters);

        if ($this->isGranted('ROLE_CONTROL')) {
            // Показывать ROLE_CONTROL только те заказы которые привязаны к оплате
            $queryBuilder->join('entity.payment', 'p');
            $queryBuilder->andWhere(':user MEMBER OF p.users')->setParameter('user', $user_id);
        } elseif ($this->isGranted('ROLE_USER')) {
            // Показывать ROLE_USER только те заказы которые привязаны к нему
            $queryBuilder->andWhere('entity.user = :user')->setParameter('user', $user_id);
        }

        return $queryBuilder;
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud->setDefaultSort(['updatedAt' => 'ASC']);

        if (!$this->isGranted('ROLE_CONTROL')) {
            $crud->setEntityPermission('ROLE_ADMIN');
        }

        return $crud; // TODO: Change the autogenerated stub
    }

    public function configureFields(string $pageName): iterable
    {
        $confirmed = BooleanField::new('confirmed', 'customer_order.confirmed')->onlyOnIndex();

        yield NumberField::new('amount', 'customer_order.amount');
        yield AssociationField::new('payment', 'customer_order.payment');
        yield AssociationField::new('type', 'customer_order.type');
        yield AssociationField::new('customer', 'customer_order.customer');
        yield AssociationField::new('user', 'customer_order.user');
        yield TextField::new('comment');

        if ($this->isGranted('ROLE_USER')) {
            yield $confirmed->renderAsSwitch(false);
        } else {
            yield $confirmed;
        }

        yield DateField::new('updatedAt', 'customer_order.updated')->setFormat('y-MM-dd HH:mm:ss');
    }
}
